package com.xuchaoji.leetcode.may2022;

/**
 * ## 压缩字符串
 * 给定字符串数组chars， 使用如下算法压缩：
 * 从一个空字符串s开始，对于chars中的每组**连续重复字符**：
 * - 如果这一组长度为1，则将字符追加到s中。
 * - 否则，需要想s追加字符，后跟这一组的长度。
 * 压缩后的到的字符串s不应该直接返回，需要转储到字符串chars中，需要注意的是，如果组长度为10或10以上，则在chars数组中会被拆分为多个字符。
 * 请在**修改完输入的数**组后，返回该数组的新长度。
 * 你必须设计并实现一个只使用常量额外空间的算法来解决此问题。
 * **示例1：**
 * ```
 * 输入：chars = ["a","a","b","b","c","c","c"]
 * 输出：返回 6 ，输入数组的前 6 个字符应该是：["a","2","b","2","c","3"]
 * 解释："aa" 被 "a2" 替代。"bb" 被 "b2" 替代。"ccc" 被 "c3" 替代。
 * ```
 * **示例2：**
 * ```
 * 输入：chars = ["a","b","b","b","b","b","b","b","b","b","b","b","b"]
 * 输出：返回 4 ，输入数组的前 4 个字符应该是：["a","b","1","2"]。
 * 解释：由于字符 "a" 不重复，所以不会被压缩。"bbbbbbbbbbbb" 被 “b12” 替代。
 * ```
 *
 * ### 双指针法
 * 为了实现原地压缩，我们可以使用双指针分别标志我们在字符串中读和写的位置。每次当读指针 read 移动到某一段连续相同子串的最右侧，我们就在写指针 write 处依次写入该子串对应的字符和子串长度即可。
 *
 * 在实际代码中，当读指针 read 位于字符串的末尾，或读指针 read 指向的字符不同于下一个字符时，我们就认为读指针 read 位于某一段连续相同子串的最右侧。该子串对应的字符即为读指针 read 指向的字符串。
 * 我们使用变量left 记录该子串的最左侧的位置，这样子串长度即为 read - left + 1。
 *
 * 特别地，为了达到 O(1)O(1) 空间复杂度，我们需要自行实现**将数字转化为字符串写入到原字符串**的功能。这里我们采用**短除法**将子串长度倒序写入原字符串中，然后再将其反转即可。
 */
public class CompressLetters {
    public int compress(char[] chars) {
        return 0;
    }

}
